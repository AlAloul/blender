/* Layout functions */

/// Responsive breakpoint manager
/// @group layout
/// @param {String} $breakpoint - Breakpoint key or rule
/// @requires $breakpoints
/// @output media-query rule with content
@mixin mq($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  } @else {
    @media (#{$breakpoint})  {
      @content;
    }
  }
}

/// Block reset
/// @group layout
/// @requires $breakpoints
/// @output reset rules
@mixin block-reset{
  width: 100% !important;
  display: block !important;
  margin-left: 0 !important;
  margin-right: 0 !important;
  float: none !important;
  transform: none !important;
}

/// Position center horizontally in parent
/// @group layout
/// @param {String} $position [absolute] - Css property
/// @output position rules
@mixin position-center-horizontal($position: absolute){
  position: $position;
  left: 50%;
  transform: translateX(-50%);
}

/// Position center vertically in parent
/// @group layout
/// @param {String} $position [absolute] - Css property
/// @output position rules
@mixin position-center-vertical($position: absolute){
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

/// Position center both in parent
/// @group layout
/// @param {String} $position [absolute] - Css property
/// @output position rules
@mixin position-center($position: absolute){
  position: $position;
  left: 50%;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
}

/// Position center reset
/// @group layout
/// @output position rules
@mixin position-center-reset(){
  position: relative;
  left: 0;
  top: 0;
  transform: translateX(0) translateY(0);
}

/* Typography mixins */

/// Generate px fallback for a CSS property with rem values
/// @group typography
/// @param {String} $property - Css property
/// @param {List} $values - One or more values
/// @requires strip-unit
/// @output property with px fallback and rem values
@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}


/// Font shortcut for font family and weight
/// @group typography
/// @param {String} $family - Font family: sans, serif, ...
/// @param {String} $weight - Font weight: light, normal, medium, bold, extrabold
/// @requires font-weight
/// @requires font-family
/// @output weight and family rule
@mixin font($family: sans, $weight: normal) {
  font-weight: font-weight($weight);
  font-family: font-family($family);
}

/// Font shortcut for font family and weight
/// @group typography
/// @param {String} $size - Font size: s, m, default, ...
/// @requires font-size
/// @output font-size rule
@mixin font-size($size: default) {
  font-size: font-size($size);
}



/// Set hyphens on
/// @group typography
/// @param {Bool} $value [true] - Hyphens on
/// @output hyphens rules
@mixin hyphens($value: true){
  @if $value == true {
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto;
  }
  @else {
    -moz-hyphens: none !important;
    -ms-hyphens: none !important;
    -webkit-hyphens: none !important;
    hyphens: none !important;
  }
}


/// Set font-smoothing
/// @group typography
/// @param {String} $value [subpixel] - subpixel or pixel
/// @output webkit/firefox rules for font-smoothing
@mixin antialiasing($value: subpixel) {
  @if $value == subpixel {
    -webkit-font-smoothing: subpixel-antialiased;
  }
  @if $value == pixel {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
}

/// Generate tag around text
/// @group typography
/// @requires border-radius
/// @param {String} $color - Text color
/// @param {String} $background-color - Background color
/// @output tag layout
@mixin tag($color, $background-color){
  display: inline-block;
  color: $color;
  background-color: $background-color;
  border-radius: border-radius(s);
  padding: 0 0.25em;
  margin-left: -0.25em;
  margin-right: -0.25em;
}


/// Set horizontal ul
/// @group typography
/// @output rules for horizontal ul
@mixin ul-horizontal() {
  list-style: none;
  margin: 0;
  padding-left: 0;

  li{
    display: inline-block;
  }
}


/* Color mixins */

/// Linear gradient
/// @group colors
/// @param {Color} $start - Start color
/// @param {Color} $end - End color
/// @param {Percentage} $form [0%] - From position
/// @param {Percentage} $to [100%]- To position
/// @output prefixed background CSS, filter for IE
@mixin gradient-linear( $start, $stop, $from: 0%, $to: 100% ) {
  background: $start;
  background: -webkit-gradient(linear, left top, left bottom, from(ie-hex-str($start)), to(ie-hex-str($stop)));
  background: -moz-linear-gradient(center top, $start $from, $stop $to);
  background: -moz-gradient(center top, $start $from, $stop $to);
  background: -webkit-linear-gradient(top, $start $from,$stop $to);
  background: -o-linear-gradient(top, $start $from,$stop $to);
  background: -ms-linear-gradient(top, $start $from,$stop $to);
  background: linear-gradient(to bottom, $start $from,$stop $to);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{ie-hex-str($start)}', endColorstr='#{ie-hex-str($stop)}',GradientType=0 );
}

/* Graphic mixins */

/// Circle
/// @group graphics
/// @param {Numeric} $size - Size
/// @param {String} $display [inline-block] - Display property
/// @output rounded inline block
@mixin circle($size, $display: 'inline-block') {
  display: inline-block;
  width: $size;
  height: $size;
  line-height: $size;
  text-align: center;
  border-radius: 100%;
  overflow: hidden;
}

/// Square
/// @group graphics
/// @param {Numeric} $size - Size
/// @param {String} $display [inline-block] - Display property
/// @output squared inline block
@mixin square($size, $display: 'inline-block') {
  display: inline-block;
  width: $size;
  height: $size;
  line-height: $size;
  text-align: center;
  overflow: hidden;
}

/// Responsive rectangle
/// @group graphics
/// @param {Numeric} $aspect-ratio - Aspect ratio
/// @param {String} $display [inline-block] - Display property
/// @output rectangle with fixed aspect-ratio
@mixin rectangle($aspect-ratio, $display: 'inline-block'){
  width: 100%;
  height: 0;
  display: $block;
  padding-bottom: $aspect-ratio;
  overflow: hidden;
}



/* Image mixins */

/// Svg background
/// @group images
/// @param {String} $image - Image url
/// @param {String} $background-position [center center] - Top, left, right, bottom, center, or unit
/// @param {String} $background-size [contain]- Contain, cover or unit
/// @param {String} $background-repeat [no-repeat] - No-repeat or repeat
/// @require str-replace
/// @output background-image with png fallback via Modernizr
@mixin background-svg($image, $background-position: center center, $background-size: contain, $background-repeat: no-repeat){
  $png : str-replace($image, '.svg', '.png');
  @include background-image($png);

  html.svg &{
    background-image: url('#{$image}');
  }
}

/// Background image
/// @group images
/// @param {String} $image - Image url
/// @param {String} $background-position [center center] - Top, left, right, bottom, center, or unit
/// @param {String} $background-size [contain]- Contain, cover or unit
/// @param {String} $background-repeat [no-repeat] - No-repeat or repeat
/// @output background-image
@mixin background-image($image, $background-position: center center, $background-size: contain, $background-repeat: no-repeat){
  background-image: url('#{$image}');
  background-size: $background-size;
  background-position: $background-position;
  background-repeat: $background-repeat;
}

/// Background image with color overlay
/// @group images
/// @param {String} $img - Image url
/// @param {Color} $rgba - RGBA color
/// @output background-image with transparent colored overlay
@mixin background-image-tinted($image,$rgba, $background-position: center center){
  background:
  linear-gradient(
                  $rgba,
                  $rgba
  ),
  url('#{$image}');
  background-size: cover;
  background-position: $background-position;
  background-repeat: no-repeat;
}